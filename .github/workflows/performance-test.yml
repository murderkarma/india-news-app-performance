name: Performance Test (Smoke)

on:
  pull_request:
    paths:
      - "india-news-app/backend/**"
      - ".github/workflows/performance-test.yml"
      - "india-news-app/load/**"
    types: [opened, synchronize, reopened]

permissions:
  contents: read
  pull-requests: write

env:
  NODE_VERSION: "18"
  TEST_MODE: "true"
  NODE_ENV: test
  JWT_SECRET: testsecret
  MONGODB_URI: mongodb://127.0.0.1:27017/yap_test
  NOTIFICATIONS_ENABLED: "false"
  IMAGE_UPLOADS_ENABLED: "false"

defaults:
  run:
    working-directory: .

jobs:
  performance-smoke-test:
    name: K6 Smoke Test (30s/50VU)
    runs-on: ubuntu-latest

    services:
      mongodb:
        image: mongo:6.0
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.runCommand({ping: 1})'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"
          cache-dependency-path: "india-news-app/backend/package-lock.json"

      - name: Install backend dependencies
        working-directory: india-news-app/backend
        run: npm ci

      - name: Start backend
        working-directory: india-news-app/backend
        run: |
          echo "Starting server with environment:"
          echo "PORT: $PORT"
          echo "NODE_ENV: $NODE_ENV"
          echo "TEST_MODE: $TEST_MODE"
          echo "MONGODB_URI: $MONGODB_URI"

          node server.js > server.log 2>&1 & echo $! > server.pid
          echo "Started server with PID: $(cat server.pid)"

          # Wait for server to be ready with health checks
          for i in {1..30}; do
            if curl -fsS http://127.0.0.1:8080/health; then
              echo "✅ Server is ready on attempt $i"
              break
            fi
            echo "Attempt $i: Server not ready, waiting..."
            sleep 1
            if [ $i -eq 30 ]; then
              echo "❌ Server failed to start after 30 attempts"
              echo "=== Server Logs ==="
              cat server.log || echo "No server logs found"
              exit 1
            fi
          done

          # Final health check
          curl -fsS http://127.0.0.1:8080/health
          echo "✅ Server is running and healthy"
        env:
          PORT: 8080
          NODE_ENV: test
          TEST_MODE: "true"
          JWT_SECRET: testsecret
          MONGODB_URI: mongodb://127.0.0.1:27017/yap_test
          NOTIFICATIONS_ENABLED: "false"
          IMAGE_UPLOADS_ENABLED: "false"
          REDIS_URL: redis://localhost:6379
          UPSTASH_REDIS_REST_URL: http://localhost:6379
          UPSTASH_REDIS_REST_TOKEN: fake-token-for-ci
          CORS_ORIGINS: http://127.0.0.1:8080

      - name: Seed & get token
        working-directory: india-news-app/backend
        run: |
          # Register test user (may fail if exists, that's OK)
          curl -fsS -X POST http://127.0.0.1:8080/api/auth/register \
            -H 'Content-Type: application/json' \
            -d '{"username":"loadtest","password":"Passw0rd!","gender":"male","state":"assam"}' || true

          # Login and get token
          TOKEN=$(curl -fsS -X POST http://127.0.0.1:8080/api/auth/login \
            -H 'Content-Type: application/json' \
            -d '{"username":"loadtest","password":"Passw0rd!"}' | jq -r .token)

          # Verify token was obtained
          if [ -z "$TOKEN" ] || [ "$TOKEN" = "null" ]; then
            echo "❌ Failed to get auth token"
            echo "=== Server Logs ==="
            tail -50 server.log || echo "No server logs found"
            exit 1
          fi

          echo "✅ Got auth token: ${TOKEN:0:20}..."
          echo "TOKEN=$TOKEN" >> $GITHUB_ENV

      - name: Install k6
        run: |
          sudo gpg -k
          sudo gpg --no-default-keyring --keyring /usr/share/keyrings/k6-archive-keyring.gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
          echo "deb [signed-by=/usr/share/keyrings/k6-archive-keyring.gpg] https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
          sudo apt-get update
          sudo apt-get install k6

      - name: Run k6 smoke test
        working-directory: india-news-app/load
        run: |
          k6 run \
            --out json=smoke-test-results.json \
            --summary-export=smoke-test-summary.json \
            smoke-test.js
        env:
          BASE_URL: http://127.0.0.1:8080
          TOKEN: ${{ env.TOKEN }}
          K6_NO_USAGE_REPORT: true

      - name: Check performance thresholds
        working-directory: india-news-app/load
        run: |
          # Parse results and check thresholds
          node -e "
            const fs = require('fs');
            const results = JSON.parse(fs.readFileSync('smoke-test-summary.json', 'utf8'));
            
            console.log('=== Performance Test Results ===');
            console.log('HTTP Request Duration (p95):', results.metrics.http_req_duration?.values?.['p(95)'] || 'N/A');
            console.log('HTTP Request Failed Rate:', results.metrics.http_req_failed?.values?.rate || 'N/A');
            console.log('Total Requests:', results.metrics.http_reqs?.values?.count || 'N/A');
            console.log('Requests/sec:', results.metrics.http_reqs?.values?.rate || 'N/A');
            
            // Print status code histogram
            console.log('=== Status Code Histogram ===');
            const statusCodes = results.metrics.status_codes?.values || {};
            Object.keys(statusCodes).forEach(code => {
              console.log(\`Status \${code}: \${statusCodes[code]} requests\`);
            });
            
            // Check thresholds
            const p95 = results.metrics.http_req_duration?.values?.['p(95)'] || 0;
            const errorRate = results.metrics.http_req_failed?.values?.rate || 0;
            
            if (p95 > 500) {
              console.error('❌ FAIL: p95 response time (' + p95 + 'ms) exceeds 500ms threshold');
              process.exit(1);
            }
            
            if (errorRate > 0.01) {
              console.error('❌ FAIL: Error rate (' + (errorRate * 100).toFixed(2) + '%) exceeds 1% threshold');
              process.exit(1);
            }
            
            console.log('✅ PASS: All performance thresholds met');
          "

      - name: Upload server log
        if: always()
        working-directory: india-news-app/backend
        run: |
          # Stop server gracefully
          if [ -f server.pid ]; then
            kill $(cat server.pid) || true
            rm server.pid
          fi

          # Show system info for debugging
          echo "=== System Info ==="
          ps aux | grep node || true
          netstat -tlnp | grep 8080 || true

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: performance-test-results
          path: |
            india-news-app/load/smoke-test-results.json
            india-news-app/load/smoke-test-summary.json
            india-news-app/backend/server.log
          retention-days: 30

      - name: Comment PR with results
        uses: actions/github-script@v7
        if: always()
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const path = 'india-news-app/load/smoke-test-summary.json';

            if (!fs.existsSync(path)) {
              console.log('No test results found');
              return;
            }

            const results = JSON.parse(fs.readFileSync(path, 'utf8'));
            const p95 = results.metrics.http_req_duration?.values?.['p(95)'] || 0;
            const errorRate = results.metrics.http_req_failed?.values?.rate || 0;
            const totalReqs = results.metrics.http_reqs?.values?.count || 0;
            const rps = results.metrics.http_reqs?.values?.rate || 0;

            // Status code histogram
            const statusCodes = results.metrics.status_codes?.values || {};
            let statusTable = '';
            Object.keys(statusCodes).forEach(code => {
              statusTable += `| ${code} | ${statusCodes[code]} |\n`;
            });

            const passed = p95 <= 500 && errorRate <= 0.01;
            const status = passed ? '✅ PASSED' : '❌ FAILED';

            const comment = `## 🚀 Performance Test Results ${status}

            **Smoke Test (30s/50VU)**

            | Metric | Value | Threshold | Status |
            |--------|-------|-----------|---------|
            | Response Time (p95) | ${p95.toFixed(0)}ms | ≤500ms | ${p95 <= 500 ? '✅' : '❌'} |
            | Error Rate | ${(errorRate * 100).toFixed(2)}% | ≤1% | ${errorRate <= 0.01 ? '✅' : '❌'} |
            | Total Requests | ${totalReqs} | - | ℹ️ |
            | Requests/sec | ${rps.toFixed(1)} | - | ℹ️ |

            **Status Code Distribution:**
            | Code | Count |
            |------|-------|
            ${statusTable}

            ${passed ? 
              '🎉 **All performance thresholds met!** This PR maintains system performance standards.' : 
              '⚠️ **Performance thresholds exceeded.** Please review the changes for potential performance impacts.'
            }

            <details>
            <summary>View detailed results</summary>

            \`\`\`json
            ${JSON.stringify(results.metrics, null, 2)}
            \`\`\`
            </details>`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
